<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/KKLua.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/KKLua</TokenIdentifier>
			<Abstract type="html">Static class containing various Lua related helper methods.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
            
			
			<NodeRef refid="18"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KKLua/setup</TokenIdentifier>
			<Abstract type="html">One-time setup of Lua. Automatically called by the Kobold Kit framework.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
			
			<Declaration>+ (void)setup</Declaration>
			
			
			<Anchor>//api/name/setup</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KKLua/luaState</TokenIdentifier>
			<Abstract type="html">The current lua state. Needed only for custom Lua code.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
			
			<Declaration>+ (lua_State *)luaState</Declaration>
			
			<ReturnValue><Abstract type="html">The current lua state. Needed only for custom Lua code.</Abstract></ReturnValue>
			<Anchor>//api/name/luaState</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KKLua/doFile:</TokenIdentifier>
			<Abstract type="html">Runs the Lua script file. File is a filename with or without path to the file, and with extension.
   Returns YES if the execution was successful and NO if it failed. Note that this is different from Lua,
   where a return value of 0 indicates success and 1 or higher indicates an error. But YES == success
   is more natural for Objective-C programmers.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
			
			<Declaration>+ (BOOL)doFile:(NSString *)aFile</Declaration>
			<Parameters>
				<Parameter>
					<Name>aFile</Name>
					<Abstract type="html">The full path to a Lua script file.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the file was found and the script was executed without errors.</Abstract></ReturnValue>
			<Anchor>//api/name/doFile:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KKLua/doString:</TokenIdentifier>
			<Abstract type="html">Runs the Lua code passed in as string.
   Returns YES if the execution was successful and NO if it failed. Note that this is different from Lua,
   where a return value of 0 indicates success and 1 or higher indicates an error. But YES == success
   is more natural for Objective-C programmers.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
			
			<Declaration>+ (BOOL)doString:(NSString *)aString</Declaration>
			<Parameters>
				<Parameter>
					<Name>aString</Name>
					<Abstract type="html">A Lua script as string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the string was executed without errors.</Abstract></ReturnValue>
			<Anchor>//api/name/doString:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KKLua/logLuaError</TokenIdentifier>
			<Abstract type="html">Logs the most recent Lua error by getting the error message string from the stack index -1 and displaying it.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
			
			<Declaration>+ (void)logLuaError</Declaration>
			
			
			<Anchor>//api/name/logLuaError</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/KKLua/logLuaErrorWithMessage:</TokenIdentifier>
			<Abstract type="html">Logs a Lua error with a custom message.</Abstract>
			<DeclaredIn>KKLua.h</DeclaredIn>
			
			<Declaration>+ (void)logLuaErrorWithMessage:(NSString *)aMessage</Declaration>
			<Parameters>
				<Parameter>
					<Name>aMessage</Name>
					<Abstract type="html">The custom message to append to the log.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logLuaErrorWithMessage:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
        
	</File>
</Tokens>