<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OGWAspect.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OGWAspect</TokenIdentifier>
			<Abstract type="html">Aspects are code plugins for entities or the world. Each subclass of OGWAspect provides custom code and/or data that
can be used while the aspect is added to an entity.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/OGWAspect/aspectWithWorld:</TokenIdentifier>
			<Abstract type="html">Creates a designated world aspect. Normally aspects are added through their category.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/OGWAspect/aspectWithEntity:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)aspectWithWorld:(OGWWorld *)world</Declaration>
			<Parameters>
				<Parameter>
					<Name>world</Name>
					<Abstract type="html">The world to which the aspect will be added.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new aspect.</Abstract></ReturnValue>
			<Anchor>//api/name/aspectWithWorld:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/OGWAspect/aspectWithEntity:</TokenIdentifier>
			<Abstract type="html">Creates a designated entity aspect.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/OGWAspect/aspectWithWorld:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)aspectWithEntity:(OGWEntity *)entity</Declaration>
			<Parameters>
				<Parameter>
					<Name>entity</Name>
					<Abstract type="html">The entity to which the aspect will be added.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new aspect.</Abstract></ReturnValue>
			<Anchor>//api/name/aspectWithEntity:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/setWorld:</TokenIdentifier>
			<Abstract type="html">The world reference provides quick access to the entity&apos;s world.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/entity</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (weak, readonly) OGWWorld *world</Declaration>
			
			<ReturnValue><Abstract type="html">The entity&apos;s world.</Abstract></ReturnValue>
			<Anchor>//api/name/world</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/world</TokenIdentifier>
			<Abstract type="html">The world reference provides quick access to the entity&apos;s world.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/entity</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (weak, readonly) OGWWorld *world</Declaration>
			
			<ReturnValue><Abstract type="html">The entity&apos;s world.</Abstract></ReturnValue>
			<Anchor>//api/name/world</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/world</TokenIdentifier>
			<Abstract type="html">The world reference provides quick access to the entity&apos;s world.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/entity</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (weak, readonly) OGWWorld *world</Declaration>
			
			<ReturnValue><Abstract type="html">The entity&apos;s world.</Abstract></ReturnValue>
			<Anchor>//api/name/world</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/setEntity:</TokenIdentifier>
			<Abstract type="html">The entity owning the aspect.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/world</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (weak, readonly) OGWEntity *entity</Declaration>
			
			<ReturnValue><Abstract type="html">The entity owning the aspect.</Abstract></ReturnValue>
			<Anchor>//api/name/entity</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/entity</TokenIdentifier>
			<Abstract type="html">The entity owning the aspect.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/world</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (weak, readonly) OGWEntity *entity</Declaration>
			
			<ReturnValue><Abstract type="html">The entity owning the aspect.</Abstract></ReturnValue>
			<Anchor>//api/name/entity</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/entity</TokenIdentifier>
			<Abstract type="html">The entity owning the aspect.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/world</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (weak, readonly) OGWEntity *entity</Declaration>
			
			<ReturnValue><Abstract type="html">The entity owning the aspect.</Abstract></ReturnValue>
			<Anchor>//api/name/entity</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/setNotifier:</TokenIdentifier>
			<Abstract type="html">Some aspects use the notifier to send delegate messages to multiple delegate. Refer to the specific aspect&apos;s documentation
to learn whether it uses the multi-delegation notifier.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/OGWNotifier</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/createNotifierWithProtocol:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (readonly) OGWNotifier *notifier</Declaration>
			
			<ReturnValue><Abstract type="html">The notifier, or nil if the aspect does not support multi-delegation.</Abstract></ReturnValue>
			<Anchor>//api/name/notifier</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/notifier</TokenIdentifier>
			<Abstract type="html">Some aspects use the notifier to send delegate messages to multiple delegate. Refer to the specific aspect&apos;s documentation
to learn whether it uses the multi-delegation notifier.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/OGWNotifier</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/createNotifierWithProtocol:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (readonly) OGWNotifier *notifier</Declaration>
			
			<ReturnValue><Abstract type="html">The notifier, or nil if the aspect does not support multi-delegation.</Abstract></ReturnValue>
			<Anchor>//api/name/notifier</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/notifier</TokenIdentifier>
			<Abstract type="html">Some aspects use the notifier to send delegate messages to multiple delegate. Refer to the specific aspect&apos;s documentation
to learn whether it uses the multi-delegation notifier.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/OGWNotifier</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/createNotifierWithProtocol:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (readonly) OGWNotifier *notifier</Declaration>
			
			<ReturnValue><Abstract type="html">The notifier, or nil if the aspect does not support multi-delegation.</Abstract></ReturnValue>
			<Anchor>//api/name/notifier</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/setEnabled:</TokenIdentifier>
			<Abstract type="html">The enabled state can be used by aspects as they see fit, it has no inherent function. Typically an aspect will use the enabled
flag to stop update processing while it is not enabled.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
			<Declaration>@property BOOL enabled</Declaration>
			
			<ReturnValue><Abstract type="html">Whether the aspect is enabled.</Abstract></ReturnValue>
			<Anchor>//api/name/enabled</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/enabled</TokenIdentifier>
			<Abstract type="html">The enabled state can be used by aspects as they see fit, it has no inherent function. Typically an aspect will use the enabled
flag to stop update processing while it is not enabled.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
			<Declaration>@property BOOL enabled</Declaration>
			
			<ReturnValue><Abstract type="html">Whether the aspect is enabled.</Abstract></ReturnValue>
			<Anchor>//api/name/enabled</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/enabled</TokenIdentifier>
			<Abstract type="html">The enabled state can be used by aspects as they see fit, it has no inherent function. Typically an aspect will use the enabled
flag to stop update processing while it is not enabled.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
			<Declaration>@property BOOL enabled</Declaration>
			
			<ReturnValue><Abstract type="html">Whether the aspect is enabled.</Abstract></ReturnValue>
			<Anchor>//api/name/enabled</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/createNotifierWithProtocol:</TokenIdentifier>
			<Abstract type="html">This will create a OGWNotifier object and initialize it with the given protocol.
Aspect subclasses use this to allow sending delegate messages to multiple delegates via the OGWNotifier object. The
protocol is used to ensure (to some extent) type safety of the delegates.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/OGWNotifier</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/OGWAspect/notifier</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)createNotifierWithProtocol:(Protocol *)protocol</Declaration>
			<Parameters>
				<Parameter>
					<Name>protocol</Name>
					<Abstract type="html">The protocol that delegates have to implement.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createNotifierWithProtocol:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/aspectDidInitialize</TokenIdentifier>
			<Abstract type="html">Sent when the OGWAspect class ran its init method. You&apos;re not supposed to override the usual init methods in an aspect class,
so instead place any initialization code and setting default values to this method.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/ownerDidAddAspect:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/ownerWillRemoveAspect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)aspectDidInitialize</Declaration>
			
			
			<Anchor>//api/name/aspectDidInitialize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/ownerDidAddAspect:</TokenIdentifier>
			<Abstract type="html">Sent when the aspect was added to its owner, which depending on the aspects intended use can either be the world
or an entity.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/aspectDidInitialize</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/ownerWillRemoveAspect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)ownerDidAddAspect:(OGWAspect *)addedAspect</Declaration>
			<Parameters>
				<Parameter>
					<Name>addedAspect</Name>
					<Abstract type="html">The aspect that was added.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/ownerDidAddAspect:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/ownerWillRemoveAspect:</TokenIdentifier>
			<Abstract type="html">Sent before the aspect is removed from its owner, which depending on the aspects intended use can either be the world
or an entity.</Abstract>
			<DeclaredIn>OGWAspect.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/aspectDidInitialize</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWAspect/ownerDidAddAspect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)ownerWillRemoveAspect:(OGWAspect *)removingAspect</Declaration>
			<Parameters>
				<Parameter>
					<Name>removingAspect</Name>
					<Abstract type="html">The aspect that will be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/ownerWillRemoveAspect:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
	</File>
</Tokens>