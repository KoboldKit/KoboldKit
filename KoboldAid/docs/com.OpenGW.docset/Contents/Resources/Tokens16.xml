<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OGWKeyedValue.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OGWKeyedValue</TokenIdentifier>
			<Abstract type="html">Allows you to story integral and struct data types by key (name) as mutable values.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
            
			
			<NodeRef refid="16"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setCount:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>@property (readonly) GWUInteger count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/count</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>@property (readonly) GWUInteger count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OGWKeyedValue/count</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>@property (readonly) GWUInteger count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setBool:forKey:</TokenIdentifier>
			<Abstract type="html">Set value of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setBool:(BOOL)boolValue forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>boolValue</Name>
					<Abstract type="html">A boolean.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setBool:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/boolForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the given type for key. Returns NO if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (BOOL)boolForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The BOOL value for the key, or NO if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/boolForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setFloat:forKey:</TokenIdentifier>
			<Abstract type="html">Set value of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setFloat:(float)floatValue forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>floatValue</Name>
					<Abstract type="html">A float.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFloat:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/floatForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (float)floatForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The float value for the key, or 0.0f if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/floatForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setDouble:forKey:</TokenIdentifier>
			<Abstract type="html">Set value of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setDouble:(double)doubleValue forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>doubleValue</Name>
					<Abstract type="html">A double.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDouble:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/doubleForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (double)doubleForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The double value for the key, or 0.0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/doubleForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setInteger:forKey:</TokenIdentifier>
			<Abstract type="html">Set value of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setInteger:(GWInteger)integerValue forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>integerValue</Name>
					<Abstract type="html">An integer.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setInteger:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/integerForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (GWInteger)integerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The intEger value for the key, or 0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/integerForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setUnsignedInteger:forKey:</TokenIdentifier>
			<Abstract type="html">Set value of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setUnsignedInteger:(GWUInteger)unsignedIntegerValue forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>unsignedIntegerValue</Name>
					<Abstract type="html">An unsigned integer.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setUnsignedInteger:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/unsignedIntegerForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (GWUInteger)unsignedIntegerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The integer value for the key, or 0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/unsignedIntegerForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setInt32:forKey:</TokenIdentifier>
			<Abstract type="html">Set value (32-Bit) of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setInt32:(int32_t)int32Value forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>int32Value</Name>
					<Abstract type="html">A 32-bit integer.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setInt32:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/int32ForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value (32-Bit) of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (int32_t)int32ForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The int32_t value for the key, or 0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/int32ForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setUnsignedInt32:forKey:</TokenIdentifier>
			<Abstract type="html">Set value (32-Bit) of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setUnsignedInt32:(uint32_t)unsignedInt32Value forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>unsignedInt32Value</Name>
					<Abstract type="html">An unsigned 32-bit integer.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setUnsignedInt32:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/unsignedInt32ForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value (32-Bit) of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (uint32_t)unsignedInt32ForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The uint32_t value for the key, or 0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/unsignedInt32ForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setInt64:forKey:</TokenIdentifier>
			<Abstract type="html">Set value (64-Bit) of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setInt64:(int64_t)int64Value forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>int64Value</Name>
					<Abstract type="html">A 64-bit integer.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setInt64:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/int64ForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value (64-Bit) of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (int64_t)int64ForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The int64_t value for the key, or 0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/int64ForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setUnsignedInt64:forKey:</TokenIdentifier>
			<Abstract type="html">Set value (64-Bit) of the given type for key. Value is mutable, it is not an NSNumber to avoid alloc/dealloc for every set.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setUnsignedInt64:(uint64_t)unsignedInt64Value forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>unsignedInt64Value</Name>
					<Abstract type="html">An unsigned 64-bit integer.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setUnsignedInt64:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/unsignedInt64ForKey:</TokenIdentifier>
			<Abstract type="html">Returns the value (64-Bit) of the given type for key. Returns 0 if there&apos;s no value with this key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (uint64_t)unsignedInt64ForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The uint64_t value for the key, or 0 if there&apos;s no variable with that key.</Abstract></ReturnValue>
			<Anchor>//api/name/unsignedInt64ForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setPoint:forKey:</TokenIdentifier>
			<Abstract type="html">Sets or replaces a point with the given key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setPoint:(GWPoint)point forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>point</Name>
					<Abstract type="html">The point to set.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPoint:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/pointForKey:</TokenIdentifier>
			<Abstract type="html">The point for the given Key. Returns GWPointZero if there&apos;s no point (literally) for the key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (GWPoint)pointForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The point for the given Key. Returns GWPointZero if there&apos;s no point (literally) for the key.</Abstract></ReturnValue>
			<Anchor>//api/name/pointForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setVector:forKey:</TokenIdentifier>
			<Abstract type="html">Sets or replaces a vector with the given key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setVector:(GWVector)vector forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>vector</Name>
					<Abstract type="html">The vector to set.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setVector:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/vectorForKey:</TokenIdentifier>
			<Abstract type="html">The vector for the given Key. Returns GWVectorZero if there&apos;s no vector for the key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (GWVector)vectorForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The vector for the given Key. Returns GWVectorZero if there&apos;s no vector for the key.</Abstract></ReturnValue>
			<Anchor>//api/name/vectorForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setSize:forKey:</TokenIdentifier>
			<Abstract type="html">Sets or replaces a size with the given key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setSize:(GWSize)size forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>size</Name>
					<Abstract type="html">The size to set.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSize:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/sizeForKey:</TokenIdentifier>
			<Abstract type="html">The size for the given Key. Returns GWSizeZero if there&apos;s no size for the key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (GWSize)sizeForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The size for the given Key. Returns GWSizeZero if there&apos;s no size for the key.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setRect:forKey:</TokenIdentifier>
			<Abstract type="html">Sets or replaces a rect with the given key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setRect:(GWRect)rect forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>rect</Name>
					<Abstract type="html">The rect to set.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setRect:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/rectForKey:</TokenIdentifier>
			<Abstract type="html">The rect for the given Key. Returns GWRectZero if there&apos;s no rect for the key.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (GWRect)rectForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string uniquely identifying the value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The rect for the given Key. Returns GWRectZero if there&apos;s no rect for the key.</Abstract></ReturnValue>
			<Anchor>//api/name/rectForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/setString:forKey:</TokenIdentifier>
			<Abstract type="html">Assign or replace any string with the given key. If string is nil, the string for that key will be removed.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (void)setString:(NSString *)string forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The string to store in the dictionary.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string to identify the object.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setString:forKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/stringForKey:</TokenIdentifier>
			<Abstract type="html">A unique string identifying the object.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The string for key or nil if there&apos;s no string associated with this key.</Abstract></ReturnValue>
			<Anchor>//api/name/stringForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/valueForKey:</TokenIdentifier>
			<Abstract type="html">The KVC key to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (id)valueForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The KVC key to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the key, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/valueForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/valueForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (id)valueForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/valueForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/stringForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a string.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The string for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/stringForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/boolForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (BOOL)boolForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/boolForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/floatForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (float)floatForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/floatForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/doubleForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (double)doubleForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/doubleForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/intForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (int32_t)intForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/intForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/unsignedIntForKeyPath:</TokenIdentifier>
			<Abstract type="html">The KVC path to a value.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (uint32_t)unsignedIntForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The KVC path to a value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value for the path, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/unsignedIntForKeyPath:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWKeyedValue/mutableNumberForKey:</TokenIdentifier>
			<Abstract type="html">Accessing the KKMutableNumber object directly allows you to change the value without having to reassign it using a setter method.</Abstract>
			<DeclaredIn>OGWKeyedValue.h</DeclaredIn>
			
			<Declaration>- (OGWMutableValue *)mutableNumberForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A unique string identifying the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The underlying KKMutableNumber object for a specific variable.A mutable number object or nil if no variable with the given key was found.</Abstract></ReturnValue>
			<Anchor>//api/name/mutableNumberForKey:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
        
	</File>
</Tokens>