<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OGWNotifier.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OGWNotifier</TokenIdentifier>
			<Abstract type="html">Stores one or more receivers (delegates) in a weak collection and can broadcast selectors to each receiver.
The notifier must be initialized with a protocol that defines the expected messages to be sent through the notifier.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
            
			
			<NodeRef refid="20"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/setProtocol:</TokenIdentifier>
			<Abstract type="html">The Protocol receivers must implement.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
			<Declaration>@property (readonly) Protocol *protocol</Declaration>
			
			<ReturnValue><Abstract type="html">The Protocol receivers must implement.</Abstract></ReturnValue>
			<Anchor>//api/name/protocol</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/protocol</TokenIdentifier>
			<Abstract type="html">The Protocol receivers must implement.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
			<Declaration>@property (readonly) Protocol *protocol</Declaration>
			
			<ReturnValue><Abstract type="html">The Protocol receivers must implement.</Abstract></ReturnValue>
			<Anchor>//api/name/protocol</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OGWNotifier/protocol</TokenIdentifier>
			<Abstract type="html">The Protocol receivers must implement.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
			<Declaration>@property (readonly) Protocol *protocol</Declaration>
			
			<ReturnValue><Abstract type="html">The Protocol receivers must implement.</Abstract></ReturnValue>
			<Anchor>//api/name/protocol</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/OGWNotifier/notifierWithSender:protocol:</TokenIdentifier>
			<Abstract type="html">Creates a notifier with a sender and the protocol expected to be implemented by receivers.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
			<Declaration>+ (id)notifierWithSender:(id&lt;OGWNotifierDelegate&gt;)sender protocol:(Protocol *)protocol</Declaration>
			<Parameters>
				<Parameter>
					<Name>sender</Name>
					<Abstract type="html">The sender object that will issue the perform selector broadcasts. The sender can optionally implement OGWNotifierDelegate
to learn when a receiver is added or removed.</Abstract>
				</Parameter><Parameter>
					<Name>protocol</Name>
					<Abstract type="html">The protocol receivers must implement. In debug configurations the receiver is tested whether it conformsToProtocol:
and each notification sent is verified with respondsToSelector: - in release builds these checks are omitted for improved performance.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The new notifier object.</Abstract></ReturnValue>
			<Anchor>//api/name/notifierWithSender:protocol:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/addReceiver:</TokenIdentifier>
			<Abstract type="html">Adds a receiver. Receiver must implement the notifier&apos;s protocol.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/removeReceiver:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/hasReceivers</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)addReceiver:(id)receiver</Declaration>
			<Parameters>
				<Parameter>
					<Name>receiver</Name>
					<Abstract type="html">The receiver to add.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addReceiver:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/removeReceiver:</TokenIdentifier>
			<Abstract type="html">Removes a receiver. Does nothing if the receiver isn&apos;t found.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/addReceiver:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/hasReceivers</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)removeReceiver:(id)receiver</Declaration>
			<Parameters>
				<Parameter>
					<Name>receiver</Name>
					<Abstract type="html">The receiver to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeReceiver:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/hasReceivers</TokenIdentifier>
			<Abstract type="html">YES if the notifier has one or more receivers, returns NO otherwise.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/addReceiver:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/removeReceiver:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)hasReceivers</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the notifier has one or more receivers, returns NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/hasReceivers</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:</TokenIdentifier>
			<Abstract type="html">Makes all receivers perform the given selector. The sender is sent as the first parameter.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:withObject:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:withVector:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)broadcastSelector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to perform on all receivers. It must have the following signature where &apos;sender&apos; can be any parameter name of your choice:

-(void) sender:(id)sender;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/broadcastSelector:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:withObject:</TokenIdentifier>
			<Abstract type="html">Makes all receivers perform the given selector. The sender is sent as the first parameter, and the object as the second parameter.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:withVector:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)broadcastSelector:(SEL)selector withObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to perform on all receivers. It must have the following signature where &apos;sender&apos; and &apos;object&apos; can be any parameter name of your choice:</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The object to send as the selector&apos;s second parameter.

-(void) sender:(id)sender object:(id)object;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/broadcastSelector:withObject:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:withVector:</TokenIdentifier>
			<Abstract type="html">Makes all receivers perform the given selector. The sender is sent as the first parameter, and the vector as the second parameter.</Abstract>
			<DeclaredIn>OGWNotifier.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/OGWNotifier/broadcastSelector:withObject:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)broadcastSelector:(SEL)selector withVector:(GWVector)vector</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to perform on all receivers. It must have the following signature where &apos;sender&apos; and &apos;vector&apos; can be any parameter name of your choice:</Abstract>
				</Parameter><Parameter>
					<Name>vector</Name>
					<Abstract type="html">The GWVector to send as the selector&apos;s second parameter.

-(void) sender:(id)sender vector:(GWVector)vector;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/broadcastSelector:withVector:</Anchor>
            <NodeRef refid="20"/>
		</Token>
		
        
	</File>
</Tokens>