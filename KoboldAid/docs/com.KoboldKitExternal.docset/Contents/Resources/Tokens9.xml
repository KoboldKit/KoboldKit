<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ALWrapper.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ALWrapper</TokenIdentifier>
			<Abstract type="html">A thin wrapper around the C OpenAL API, with a few convenience methods thrown in.
Wherever possible, methods return the requested data rather than requiring a pointer to be
passed in.
Besides collecting the API calls into a single global object, all calls are combined with an
error check.
Any OpenAL errors that occur will be logged if error logging is enabled.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/genBuffers:numBuffers:</TokenIdentifier>
			<Abstract type="html">Generate buffers.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)genBuffers:(ALuint *)bufferIds numBuffers:(ALsizei)numBuffers</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferIds</Name>
					<Abstract type="html">Pointer to an array that will receive the buffer IDs.</Abstract>
				</Parameter><Parameter>
					<Name>numBuffers</Name>
					<Abstract type="html">the number of buffers to generate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/genBuffers:numBuffers:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/genBuffer</TokenIdentifier>
			<Abstract type="html">Generate a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALuint)genBuffer</Declaration>
			
			<ReturnValue><Abstract type="html">the buffer&apos;s ID.</Abstract></ReturnValue>
			<Anchor>//api/name/genBuffer</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/deleteBuffers:numBuffers:</TokenIdentifier>
			<Abstract type="html">Delete buffers.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)deleteBuffers:(ALuint *)bufferIds numBuffers:(ALsizei)numBuffers</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferIds</Name>
					<Abstract type="html">Pointer to an array containing the buffer IDs.</Abstract>
				</Parameter><Parameter>
					<Name>numBuffers</Name>
					<Abstract type="html">the number of buffers to delete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteBuffers:numBuffers:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/deleteBuffer:</TokenIdentifier>
			<Abstract type="html">Delete a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)deleteBuffer:(ALuint)bufferId</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The ID of the buffer to delete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteBuffer:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/isBuffer:</TokenIdentifier>
			<Abstract type="html">Check if the speified buffer exists.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)isBuffer:(ALuint)bufferId</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The ID of the buffer to query.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the buffer exists.</Abstract></ReturnValue>
			<Anchor>//api/name/isBuffer:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/bufferData:format:data:size:frequency:</TokenIdentifier>
			<Abstract type="html">Load data into a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)bufferData:(ALuint)bufferId format:(ALenum)format data:(const ALvoid *)data size:(ALsizei)size frequency:(ALsizei)frequency</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The ID of the buffer to load data into.</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">The format of the data being loaded (typically ALFORMATMONO16 or
ALFORMATSTEREO16).</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">The audio data.</Abstract>
				</Parameter><Parameter>
					<Name>size</Name>
					<Abstract type="html">The size of the data in bytes.</Abstract>
				</Parameter><Parameter>
					<Name>frequency</Name>
					<Abstract type="html">The sample frequency of the data.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/bufferData:format:data:size:frequency:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/bufferf:parameter:value:</TokenIdentifier>
			<Abstract type="html">Write a float paramter to a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)bufferf:(ALuint)bufferId parameter:(ALenum)parameter value:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferf:parameter:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/buffer3f:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Write a 3 float paramter to a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)buffer3f:(ALuint)bufferId parameter:(ALenum)parameter v1:(ALfloat)v1 v2:(ALfloat)v2 v3:(ALfloat)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">the parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/buffer3f:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/bufferfv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Write a float array paramter to a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)bufferfv:(ALuint)bufferId parameter:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The values to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferfv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/bufferi:parameter:value:</TokenIdentifier>
			<Abstract type="html">Write an integer paramter to a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)bufferi:(ALuint)bufferId parameter:(ALenum)parameter value:(ALint)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferi:parameter:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/buffer3i:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Write a 3 integer paramter to a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)buffer3i:(ALuint)bufferId parameter:(ALenum)parameter v1:(ALint)v1 v2:(ALint)v2 v3:(ALint)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/buffer3i:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/bufferiv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Write an integer array paramter to a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)bufferiv:(ALuint)bufferId parameter:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The values to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferiv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBufferf:parameter:</TokenIdentifier>
			<Abstract type="html">Read a float paramter from a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALfloat)getBufferf:(ALuint)bufferId parameter:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/getBufferf:parameter:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBuffer3f:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Read a 3 float paramter from a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getBuffer3f:(ALuint)bufferId parameter:(ALenum)parameter v1:(ALfloat *)v1 v2:(ALfloat *)v2 v3:(ALfloat *)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getBuffer3f:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBufferfv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Read a float array paramter from a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getBufferfv:(ALuint)bufferId parameter:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getBufferfv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBufferi:parameter:</TokenIdentifier>
			<Abstract type="html">Read an integer paramter from a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)getBufferi:(ALuint)bufferId parameter:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/getBufferi:parameter:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBuffer3i:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Read a 3 integer paramter from a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getBuffer3i:(ALuint)bufferId parameter:(ALenum)parameter v1:(ALint *)v1 v2:(ALint *)v2 v3:(ALint *)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getBuffer3i:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBufferiv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Read an integer array paramter from a buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getBufferiv:(ALuint)bufferId parameter:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The buffer&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getBufferiv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/genSources:numSources:</TokenIdentifier>
			<Abstract type="html">Generate sources.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)genSources:(ALuint *)sourceIds numSources:(ALsizei)numSources</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceIds</Name>
					<Abstract type="html">Pointer to an array that will receive the source IDs.</Abstract>
				</Parameter><Parameter>
					<Name>numSources</Name>
					<Abstract type="html">the number of sources to generate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/genSources:numSources:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/genSource</TokenIdentifier>
			<Abstract type="html">Generate a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALuint)genSource</Declaration>
			
			<ReturnValue><Abstract type="html">the source&apos;s ID.</Abstract></ReturnValue>
			<Anchor>//api/name/genSource</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/deleteSources:numSources:</TokenIdentifier>
			<Abstract type="html">Delete sources.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)deleteSources:(ALuint *)sourceIds numSources:(ALsizei)numSources</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceIds</Name>
					<Abstract type="html">Pointer to an array containing the source IDs.</Abstract>
				</Parameter><Parameter>
					<Name>numSources</Name>
					<Abstract type="html">the number of sources to delete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteSources:numSources:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/deleteSource:</TokenIdentifier>
			<Abstract type="html">Delete a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)deleteSource:(ALuint)sourceId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The ID of the source to delete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteSource:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/isSource:</TokenIdentifier>
			<Abstract type="html">Check if the speified source exists.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)isSource:(ALuint)sourceId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The ID of the source to query.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the buffer exists.</Abstract></ReturnValue>
			<Anchor>//api/name/isSource:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcePlay:</TokenIdentifier>
			<Abstract type="html">Play a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcePlay:(ALuint)sourceId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The ID of the source to play.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the buffer exists.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcePlay:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcePlayv:numSources:</TokenIdentifier>
			<Abstract type="html">Play a bunch of sources.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcePlayv:(ALuint *)sourceIds numSources:(ALsizei)numSources</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceIds</Name>
					<Abstract type="html">The sources to play.</Abstract>
				</Parameter><Parameter>
					<Name>numSources</Name>
					<Abstract type="html">The number of sources in sourceIds.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcePlayv:numSources:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcePause:</TokenIdentifier>
			<Abstract type="html">Pause a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcePause:(ALuint)sourceId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The ID of the source to pause.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcePause:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcePausev:numSources:</TokenIdentifier>
			<Abstract type="html">Pause a bunch of sources.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcePausev:(ALuint *)sourceIds numSources:(ALsizei)numSources</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceIds</Name>
					<Abstract type="html">The sources to pause.</Abstract>
				</Parameter><Parameter>
					<Name>numSources</Name>
					<Abstract type="html">The number of sources in sourceIds.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcePausev:numSources:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceStop:</TokenIdentifier>
			<Abstract type="html">Stop a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceStop:(ALuint)sourceId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The ID of the source to stop.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceStop:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceStopv:numSources:</TokenIdentifier>
			<Abstract type="html">Stop a bunch of sources.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceStopv:(ALuint *)sourceIds numSources:(ALsizei)numSources</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceIds</Name>
					<Abstract type="html">The sources to stop.</Abstract>
				</Parameter><Parameter>
					<Name>numSources</Name>
					<Abstract type="html">The number of sources in sourceIds.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceStopv:numSources:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceRewind:</TokenIdentifier>
			<Abstract type="html">Rewind a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceRewind:(ALuint)sourceId</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The ID of the source to rewind.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceRewind:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceRewindv:numSources:</TokenIdentifier>
			<Abstract type="html">Rewind a bunch of sources.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceRewindv:(ALuint *)sourceIds numSources:(ALsizei)numSources</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceIds</Name>
					<Abstract type="html">The sources to rewind.</Abstract>
				</Parameter><Parameter>
					<Name>numSources</Name>
					<Abstract type="html">The number of sources in sourceIds.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceRewindv:numSources:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceQueueBuffers:numBuffers:bufferIds:</TokenIdentifier>
			<Abstract type="html">Queue buffers into a source for sequential playback.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceQueueBuffers:(ALuint)sourceId numBuffers:(ALsizei)numBuffers bufferIds:(ALuint *)bufferIds</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source to use for playback.</Abstract>
				</Parameter><Parameter>
					<Name>numBuffers</Name>
					<Abstract type="html">The number of buffers to queue.</Abstract>
				</Parameter><Parameter>
					<Name>bufferIds</Name>
					<Abstract type="html">The IDs of the buffers to queue.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceQueueBuffers:numBuffers:bufferIds:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceUnqueueBuffers:numBuffers:bufferIds:</TokenIdentifier>
			<Abstract type="html">Unqueue previously queued buffers.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceUnqueueBuffers:(ALuint)sourceId numBuffers:(ALsizei)numBuffers bufferIds:(ALuint *)bufferIds</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source the buffers were previously queued in.</Abstract>
				</Parameter><Parameter>
					<Name>numBuffers</Name>
					<Abstract type="html">The number of buffers to unqueue.</Abstract>
				</Parameter><Parameter>
					<Name>bufferIds</Name>
					<Abstract type="html">The IDs of the buffers to unqueue.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation is successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceUnqueueBuffers:numBuffers:bufferIds:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcef:parameter:value:</TokenIdentifier>
			<Abstract type="html">Write a float paramter to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcef:(ALuint)sourceId parameter:(ALenum)parameter value:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcef:parameter:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/source3f:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Write a 3 float paramter to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)source3f:(ALuint)sourceId parameter:(ALenum)parameter v1:(ALfloat)v1 v2:(ALfloat)v2 v3:(ALfloat)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">the parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/source3f:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcefv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Write a float array paramter to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcefv:(ALuint)sourceId parameter:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The values to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcefv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourcei:parameter:value:</TokenIdentifier>
			<Abstract type="html">Write an integer paramter to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourcei:(ALuint)sourceId parameter:(ALenum)parameter value:(ALint)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourcei:parameter:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/source3i:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Write a 3 integer paramter to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)source3i:(ALuint)sourceId parameter:(ALenum)parameter v1:(ALint)v1 v2:(ALint)v2 v3:(ALint)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/source3i:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/sourceiv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Write an integer array paramter to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)sourceiv:(ALuint)sourceId parameter:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The values to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/sourceiv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSourcef:parameter:</TokenIdentifier>
			<Abstract type="html">Read a float paramter from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALfloat)getSourcef:(ALuint)sourceId parameter:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/getSourcef:parameter:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSource3f:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Read a 3 float paramter from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getSource3f:(ALuint)sourceId parameter:(ALenum)parameter v1:(ALfloat *)v1 v2:(ALfloat *)v2 v3:(ALfloat *)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getSource3f:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSourcefv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Read a float array paramter from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getSourcefv:(ALuint)sourceId parameter:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getSourcefv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSourcei:parameter:</TokenIdentifier>
			<Abstract type="html">Read an integer paramter from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)getSourcei:(ALuint)sourceId parameter:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/getSourcei:parameter:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSource3i:parameter:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Read a 3 integer paramter from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getSource3i:(ALuint)sourceId parameter:(ALenum)parameter v1:(ALint *)v1 v2:(ALint *)v2 v3:(ALint *)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getSource3i:parameter:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSourceiv:parameter:values:</TokenIdentifier>
			<Abstract type="html">Read an integer array paramter from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getSourceiv:(ALuint)sourceId parameter:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getSourceiv:parameter:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/listenerf:value:</TokenIdentifier>
			<Abstract type="html">Write a float paramter to the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)listenerf:(ALenum)parameter value:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/listenerf:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/listener3f:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Write a 3 float paramter to the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)listener3f:(ALenum)parameter v1:(ALfloat)v1 v2:(ALfloat)v2 v3:(ALfloat)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">the parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/listener3f:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/listenerfv:values:</TokenIdentifier>
			<Abstract type="html">Write a float array paramter to the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)listenerfv:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The values to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/listenerfv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/listeneri:value:</TokenIdentifier>
			<Abstract type="html">Write an integer paramter to the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)listeneri:(ALenum)parameter value:(ALint)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/listeneri:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/listener3i:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Write a 3 integer paramter to the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)listener3i:(ALenum)parameter v1:(ALint)v1 v2:(ALint)v2 v3:(ALint)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to write.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/listener3i:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/listeneriv:values:</TokenIdentifier>
			<Abstract type="html">Write an integer array paramter to the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)listeneriv:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to write to.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The values to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/listeneriv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getListenerf:</TokenIdentifier>
			<Abstract type="html">Read a float paramter from the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALfloat)getListenerf:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/getListenerf:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getListener3f:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Read a 3 float paramter from the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getListener3f:(ALenum)parameter v1:(ALfloat *)v1 v2:(ALfloat *)v2 v3:(ALfloat *)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getListener3f:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getListenerfv:values:</TokenIdentifier>
			<Abstract type="html">Read a float array paramter from the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getListenerfv:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getListenerfv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getListeneri:</TokenIdentifier>
			<Abstract type="html">Read an integer paramter from the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)getListeneri:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/getListeneri:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getListener3i:v1:v2:v3:</TokenIdentifier>
			<Abstract type="html">Read a 3 integer paramter from the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getListener3i:(ALenum)parameter v1:(ALint *)v1 v2:(ALint *)v2 v3:(ALint *)v3</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>v1</Name>
					<Abstract type="html">The first value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v2</Name>
					<Abstract type="html">The second value to read.</Abstract>
				</Parameter><Parameter>
					<Name>v3</Name>
					<Abstract type="html">The third value to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getListener3i:v1:v2:v3:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getListeneriv:values:</TokenIdentifier>
			<Abstract type="html">Read an integer array paramter from the current listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getListeneriv:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to read.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getListeneriv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/enable:</TokenIdentifier>
			<Abstract type="html">Enable a capability.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)enable:(ALenum)capability</Declaration>
			<Parameters>
				<Parameter>
					<Name>capability</Name>
					<Abstract type="html">The capability to enable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/enable:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/disable:</TokenIdentifier>
			<Abstract type="html">Disable a capability.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)disable:(ALenum)capability</Declaration>
			<Parameters>
				<Parameter>
					<Name>capability</Name>
					<Abstract type="html">The capability to disable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/disable:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/isEnabled:</TokenIdentifier>
			<Abstract type="html">Check if a capability is enabled.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)isEnabled:(ALenum)capability</Declaration>
			<Parameters>
				<Parameter>
					<Name>capability</Name>
					<Abstract type="html">The capability to check.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the capability is enabled.</Abstract></ReturnValue>
			<Anchor>//api/name/isEnabled:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBoolean:</TokenIdentifier>
			<Abstract type="html">Get a boolean parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getBoolean:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getBoolean:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getDouble:</TokenIdentifier>
			<Abstract type="html">Get a double parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALdouble)getDouble:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getDouble:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getFloat:</TokenIdentifier>
			<Abstract type="html">Get a float parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALfloat)getFloat:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getFloat:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getInteger:</TokenIdentifier>
			<Abstract type="html">Get an integer parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)getInteger:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getInteger:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getString:</TokenIdentifier>
			<Abstract type="html">Get a string parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getString:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getString:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getNullSeparatedStringList:</TokenIdentifier>
			<Abstract type="html">Get a string list parameter. Use this method for OpenAL parameters that return a null
separated list.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getNullSeparatedStringList:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value (as an array of NSString*).</Abstract></ReturnValue>
			<Anchor>//api/name/getNullSeparatedStringList:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSpaceSeparatedStringList:</TokenIdentifier>
			<Abstract type="html">Get a string list parameter. Use this method for OpenAL parameters that return a space
separated list.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getSpaceSeparatedStringList:(ALenum)parameter</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value (as an array of NSString*).</Abstract></ReturnValue>
			<Anchor>//api/name/getSpaceSeparatedStringList:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getBooleanv:values:</TokenIdentifier>
			<Abstract type="html">Get a boolean array parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getBooleanv:(ALenum)parameter values:(ALboolean *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to hold the result.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getBooleanv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getDoublev:values:</TokenIdentifier>
			<Abstract type="html">Get a double array parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getDoublev:(ALenum)parameter values:(ALdouble *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to hold the result.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getDoublev:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getFloatv:values:</TokenIdentifier>
			<Abstract type="html">Get a float array parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getFloatv:(ALenum)parameter values:(ALfloat *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to hold the result.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getFloatv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getIntegerv:values:</TokenIdentifier>
			<Abstract type="html">Get an integer array parameter.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getIntegerv:(ALenum)parameter values:(ALint *)values</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">The parameter to fetch.</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">An array to hold the result.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getIntegerv:values:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/distanceModel:</TokenIdentifier>
			<Abstract type="html">Set the distance model.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)distanceModel:(ALenum)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to set.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/distanceModel:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/dopplerFactor:</TokenIdentifier>
			<Abstract type="html">Set the doppler factor.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)dopplerFactor:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to set.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/dopplerFactor:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/speedOfSound:</TokenIdentifier>
			<Abstract type="html">Set the speed of sound.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)speedOfSound:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to set.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/speedOfSound:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/isExtensionPresent:</TokenIdentifier>
			<Abstract type="html">Check if an extension is present.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)isExtensionPresent:(NSString *)extensionName</Declaration>
			<Parameters>
				<Parameter>
					<Name>extensionName</Name>
					<Abstract type="html">The name of the extension to check.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the extension is present.</Abstract></ReturnValue>
			<Anchor>//api/name/isExtensionPresent:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getProcAddress:</TokenIdentifier>
			<Abstract type="html">Get the address of a procedure.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (void *)getProcAddress:(NSString *)functionName</Declaration>
			<Parameters>
				<Parameter>
					<Name>functionName</Name>
					<Abstract type="html">The name of the procedure to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A pointer to the procedure, or NULL if it wasn&apos;t found.</Abstract></ReturnValue>
			<Anchor>//api/name/getProcAddress:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getEnumValue:</TokenIdentifier>
			<Abstract type="html">Get the enum value from its name.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALenum)getEnumValue:(NSString *)enumName</Declaration>
			<Parameters>
				<Parameter>
					<Name>enumName</Name>
					<Abstract type="html">the name of the enum value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The enum value.</Abstract></ReturnValue>
			<Anchor>//api/name/getEnumValue:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/openDevice:</TokenIdentifier>
			<Abstract type="html">Open a device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALCdevice *)openDevice:(NSString *)deviceName</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceName</Name>
					<Abstract type="html">The name of the device to open (nil = open the default device).</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The opened device, or nil on failure.</Abstract></ReturnValue>
			<Anchor>//api/name/openDevice:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/closeDevice:</TokenIdentifier>
			<Abstract type="html">Close a device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)closeDevice:(ALCdevice *)device</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to close.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/closeDevice:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/createContext:attributes:</TokenIdentifier>
			<Abstract type="html">Create an OpenAL context.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALCcontext *)createContext:(ALCdevice *)device attributes:(ALCint *)attributes</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to open the context on.</Abstract>
				</Parameter><Parameter>
					<Name>attributes</Name>
					<Abstract type="html">The attributes to use when creating the context.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The new context.</Abstract></ReturnValue>
			<Anchor>//api/name/createContext:attributes:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/makeContextCurrent:</TokenIdentifier>
			<Abstract type="html">Make the specified context the current context.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)makeContextCurrent:(ALCcontext *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">the context to make current.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/makeContextCurrent:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/makeContextCurrent:deviceReference:</TokenIdentifier>
			<Abstract type="html">Make the specified context the current context, passing in a device reference for more
informative logging info.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)makeContextCurrent:(ALCcontext *)context deviceReference:(ALCdevice *)deviceReference</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">The context to make current.</Abstract>
				</Parameter><Parameter>
					<Name>deviceReference</Name>
					<Abstract type="html">The device reference to use when logging an error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/makeContextCurrent:deviceReference:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/processContext:</TokenIdentifier>
			<Abstract type="html">Process a context.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (void)processContext:(ALCcontext *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">The contect to process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/processContext:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/suspendContext:</TokenIdentifier>
			<Abstract type="html">Suspend a context.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (void)suspendContext:(ALCcontext *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">The contect to suspend.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/suspendContext:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/destroyContext:</TokenIdentifier>
			<Abstract type="html">Destroy a context.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (void)destroyContext:(ALCcontext *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">The contect to destroy.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/destroyContext:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getCurrentContext</TokenIdentifier>
			<Abstract type="html">Get the current context.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALCcontext *)getCurrentContext</Declaration>
			
			<ReturnValue><Abstract type="html">the current context.</Abstract></ReturnValue>
			<Anchor>//api/name/getCurrentContext</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getContextsDevice:</TokenIdentifier>
			<Abstract type="html">Get the device a context was created from.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALCdevice *)getContextsDevice:(ALCcontext *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">The context.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The context&apos;s device.</Abstract></ReturnValue>
			<Anchor>//api/name/getContextsDevice:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getContextsDevice:deviceReference:</TokenIdentifier>
			<Abstract type="html">Get the device a context was created from, passing in a device reference for more
informative logging info.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALCdevice *)getContextsDevice:(ALCcontext *)context deviceReference:(ALCdevice *)deviceReference</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">The context.</Abstract>
				</Parameter><Parameter>
					<Name>deviceReference</Name>
					<Abstract type="html">The device reference to use when logging an error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The context&apos;s device.</Abstract></ReturnValue>
			<Anchor>//api/name/getContextsDevice:deviceReference:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/isExtensionPresent:name:</TokenIdentifier>
			<Abstract type="html">Check if an extension is present on a device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)isExtensionPresent:(ALCdevice *)device name:(NSString *)extensionName</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to check for an extension on.</Abstract>
				</Parameter><Parameter>
					<Name>extensionName</Name>
					<Abstract type="html">The name of the extension to check for.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the extension is present.</Abstract></ReturnValue>
			<Anchor>//api/name/isExtensionPresent:name:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getProcAddress:name:</TokenIdentifier>
			<Abstract type="html">Get the address of a procedure for a device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (void *)getProcAddress:(ALCdevice *)device name:(NSString *)functionName</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to check on.</Abstract>
				</Parameter><Parameter>
					<Name>functionName</Name>
					<Abstract type="html">The name of the procedure to check for.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The procedure&apos;s address, or NULL if not found.</Abstract></ReturnValue>
			<Anchor>//api/name/getProcAddress:name:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getEnumValue:name:</TokenIdentifier>
			<Abstract type="html">Get the enum value from its name.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALenum)getEnumValue:(ALCdevice *)device name:(NSString *)enumName</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to check on.</Abstract>
				</Parameter><Parameter>
					<Name>enumName</Name>
					<Abstract type="html">the name of the enum value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The enum value.</Abstract></ReturnValue>
			<Anchor>//api/name/getEnumValue:name:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getString:attribute:</TokenIdentifier>
			<Abstract type="html">Get a string attribute.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getString:(ALCdevice *)device attribute:(ALenum)attribute</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to read the attribute from.</Abstract>
				</Parameter><Parameter>
					<Name>attribute</Name>
					<Abstract type="html">The attribute to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getString:attribute:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getNullSeparatedStringList:attribute:</TokenIdentifier>
			<Abstract type="html">Get a string list attribute. Use this method for OpenAL attributes that return a null
separated list.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getNullSeparatedStringList:(ALCdevice *)device attribute:(ALenum)attribute</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to read the attribute from.</Abstract>
				</Parameter><Parameter>
					<Name>attribute</Name>
					<Abstract type="html">The attribute to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value (as an array of NSString*).</Abstract></ReturnValue>
			<Anchor>//api/name/getNullSeparatedStringList:attribute:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getSpaceSeparatedStringList:attribute:</TokenIdentifier>
			<Abstract type="html">Get a string list attribute. Use this method for OpenAL attributes that return a space
separated list.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)getSpaceSeparatedStringList:(ALCdevice *)device attribute:(ALenum)attribute</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to read the attribute from.</Abstract>
				</Parameter><Parameter>
					<Name>attribute</Name>
					<Abstract type="html">The attribute to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value (as an array of NSString*).</Abstract></ReturnValue>
			<Anchor>//api/name/getSpaceSeparatedStringList:attribute:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getInteger:attribute:</TokenIdentifier>
			<Abstract type="html">Get an integer attribute.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)getInteger:(ALCdevice *)device attribute:(ALenum)attribute</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to read the attribute from.</Abstract>
				</Parameter><Parameter>
					<Name>attribute</Name>
					<Abstract type="html">The attribute to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The parameter&apos;s current value.</Abstract></ReturnValue>
			<Anchor>//api/name/getInteger:attribute:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getIntegerv:attribute:size:data:</TokenIdentifier>
			<Abstract type="html">Get an integer array attribute.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)getIntegerv:(ALCdevice *)device attribute:(ALenum)attribute size:(ALsizei)size data:(ALCint *)data</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to read the attribute from.</Abstract>
				</Parameter><Parameter>
					<Name>attribute</Name>
					<Abstract type="html">The attribute to read.</Abstract>
				</Parameter><Parameter>
					<Name>size</Name>
					<Abstract type="html">the size of the receiving array.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">An array to store the values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/getIntegerv:attribute:size:data:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/openCaptureDevice:frequency:format:bufferSize:</TokenIdentifier>
			<Abstract type="html">UNSUPPORTED ON IOS* Open an audio capture device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALCdevice *)openCaptureDevice:(NSString *)deviceName frequency:(ALCuint)frequency format:(ALCenum)format bufferSize:(ALCsizei)bufferSize</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceName</Name>
					<Abstract type="html">The name of the device to open (nil = open the default device).</Abstract>
				</Parameter><Parameter>
					<Name>frequency</Name>
					<Abstract type="html">The sampling frequency to use.</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">The format to capture the data as.</Abstract>
				</Parameter><Parameter>
					<Name>bufferSize</Name>
					<Abstract type="html">The size of capture buffer to use.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The opened device, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/openCaptureDevice:frequency:format:bufferSize:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/closeCaptureDevice:</TokenIdentifier>
			<Abstract type="html">Close a capture device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)closeCaptureDevice:(ALCdevice *)device</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to close.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/closeCaptureDevice:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/startCapture:</TokenIdentifier>
			<Abstract type="html">Start capturing audio data.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)startCapture:(ALCdevice *)device</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device to capture on.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/startCapture:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/stopCapture:</TokenIdentifier>
			<Abstract type="html">Stop capturing audio data.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)stopCapture:(ALCdevice *)device</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The device capturing audio data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/stopCapture:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/captureSamples:buffer:numSamples:</TokenIdentifier>
			<Abstract type="html">Get captured samples from a device.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)captureSamples:(ALCdevice *)device buffer:(ALCvoid *)buffer numSamples:(ALCsizei)numSamples</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">the device to fetch samples from.</Abstract>
				</Parameter><Parameter>
					<Name>buffer</Name>
					<Abstract type="html">the buffer to copy the samples into.</Abstract>
				</Parameter><Parameter>
					<Name>numSamples</Name>
					<Abstract type="html">the number of samples to fetch.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/captureSamples:buffer:numSamples:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getMixerOutputDataRate</TokenIdentifier>
			<Abstract type="html">Get the iOS device&apos;s mixer outut data rate.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALdouble)getMixerOutputDataRate</Declaration>
			
			<ReturnValue><Abstract type="html">The mixer output data rate.</Abstract></ReturnValue>
			<Anchor>//api/name/getMixerOutputDataRate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/setMixerOutputDataRate:</TokenIdentifier>
			<Abstract type="html">Set the iOS device&apos;s mixer output data rate.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)setMixerOutputDataRate:(ALdouble)frequency</Declaration>
			<Parameters>
				<Parameter>
					<Name>frequency</Name>
					<Abstract type="html">The output data rate (frequency).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setMixerOutputDataRate:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/bufferDataStatic:format:data:size:frequency:</TokenIdentifier>
			<Abstract type="html">Load data into a buffer. Unlike &quot;bufferData&quot;, with this method the buffer will
use the passed in data buffer direcly rather than allocating its own memory
and copying from the data buffer.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)bufferDataStatic:(ALuint)bufferId format:(ALenum)format data:(const ALvoid *)data size:(ALsizei)size frequency:(ALsizei)frequency</Declaration>
			<Parameters>
				<Parameter>
					<Name>bufferId</Name>
					<Abstract type="html">The ID of the buffer to load data into.</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">The format of the data being loaded (typically ALFORMATMONO16 or
ALFORMATSTEREO16).</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">The audio data.</Abstract>
				</Parameter><Parameter>
					<Name>size</Name>
					<Abstract type="html">The size of the data in bytes.</Abstract>
				</Parameter><Parameter>
					<Name>frequency</Name>
					<Abstract type="html">The sample frequency of the data.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/bufferDataStatic:format:data:size:frequency:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaGetListenerb:</TokenIdentifier>
			<Abstract type="html">Read a boolean ASA property from a listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaGetListenerb:(ALuint)property</Declaration>
			<Parameters>
				<Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The property&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/asaGetListenerb:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaGetListeneri:</TokenIdentifier>
			<Abstract type="html">Read an integer ASA property from a listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)asaGetListeneri:(ALuint)property</Declaration>
			<Parameters>
				<Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The property&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/asaGetListeneri:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaGetListenerf:</TokenIdentifier>
			<Abstract type="html">Read a floating point ASA property from a listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALfloat)asaGetListenerf:(ALuint)property</Declaration>
			<Parameters>
				<Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The property&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/asaGetListenerf:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaListenerb:value:</TokenIdentifier>
			<Abstract type="html">Write a boolean ASA value to a listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaListenerb:(ALuint)property value:(bool)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/asaListenerb:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaListeneri:value:</TokenIdentifier>
			<Abstract type="html">Write an integer ASA value to a listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaListeneri:(ALuint)property value:(ALint)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/asaListeneri:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaListenerf:value:</TokenIdentifier>
			<Abstract type="html">Write a floating point ASA value to a listener.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaListenerf:(ALuint)property value:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/asaListenerf:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaGetSourceb:property:</TokenIdentifier>
			<Abstract type="html">Read a boolean ASA property from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaGetSourceb:(ALuint)sourceId property:(ALuint)property</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The property&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/asaGetSourceb:property:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaGetSourcei:property:</TokenIdentifier>
			<Abstract type="html">Read an integer ASA property from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)asaGetSourcei:(ALuint)sourceId property:(ALuint)property</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The property&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/asaGetSourcei:property:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaGetSourcef:property:</TokenIdentifier>
			<Abstract type="html">Read a floating point ASA property from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALfloat)asaGetSourcef:(ALuint)sourceId property:(ALuint)property</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to read.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The property&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/asaGetSourcef:property:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaSourceb:property:value:</TokenIdentifier>
			<Abstract type="html">Write a boolean ASA value to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaSourceb:(ALuint)sourceId property:(ALuint)property value:(bool)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/asaSourceb:property:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaSourcei:property:value:</TokenIdentifier>
			<Abstract type="html">Write an integer ASA value to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaSourcei:(ALuint)sourceId property:(ALuint)property value:(ALint)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/asaSourcei:property:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/asaSourcef:property:value:</TokenIdentifier>
			<Abstract type="html">Write a floating point ASA value to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)asaSourcef:(ALuint)sourceId property:(ALuint)property value:(ALfloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceId</Name>
					<Abstract type="html">The source&apos;s ID.</Abstract>
				</Parameter><Parameter>
					<Name>property</Name>
					<Abstract type="html">The property to write to.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to write.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/asaSourcef:property:value:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/setRenderingQuality:</TokenIdentifier>
			<Abstract type="html">Set the rendering quality. The value may be one of:</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)setRenderingQuality:(ALint)quality</Declaration>
			<Parameters>
				<Parameter>
					<Name>quality</Name>
					<Abstract type="html">The quality.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setRenderingQuality:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/getRenderingQuality</TokenIdentifier>
			<Abstract type="html">Get the rendering quality.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (ALint)getRenderingQuality</Declaration>
			
			<ReturnValue><Abstract type="html">The current rendering quality.</Abstract></ReturnValue>
			<Anchor>//api/name/getRenderingQuality</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/addNotification:onSource:callback:userData:</TokenIdentifier>
			<Abstract type="html">Add a notification callback to a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)addNotification:(ALuint)notificationID onSource:(ALuint)source callback:(alSourceNotificationProc)callback userData:(void *)userData</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationID</Name>
					<Abstract type="html">The kind of notification to be informed of (see above).</Abstract>
				</Parameter><Parameter>
					<Name>source</Name>
					<Abstract type="html">The source ID.</Abstract>
				</Parameter><Parameter>
					<Name>callback</Name>
					<Abstract type="html">The function to call for notification.</Abstract>
				</Parameter><Parameter>
					<Name>userData</Name>
					<Abstract type="html">a pointer that will be passed to the callback.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/addNotification:onSource:callback:userData:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ALWrapper/removeNotification:onSource:callback:userData:</TokenIdentifier>
			<Abstract type="html">Remove a notification callback from a source.</Abstract>
			<DeclaredIn>ALWrapper.h</DeclaredIn>
			
			<Declaration>+ (bool)removeNotification:(ALuint)notificationID onSource:(ALuint)source callback:(alSourceNotificationProc)callback userData:(void *)userData</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationID</Name>
					<Abstract type="html">The kind of notification (see addNotification).</Abstract>
				</Parameter><Parameter>
					<Name>source</Name>
					<Abstract type="html">The source ID.</Abstract>
				</Parameter><Parameter>
					<Name>callback</Name>
					<Abstract type="html">The function to be unregistered.</Abstract>
				</Parameter><Parameter>
					<Name>userData</Name>
					<Abstract type="html">not actually needed but part of the API.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/removeNotification:onSource:callback:userData:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
	</File>
</Tokens>