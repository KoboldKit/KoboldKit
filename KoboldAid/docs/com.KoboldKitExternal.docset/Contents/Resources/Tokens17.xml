<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OALAudioTrack.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OALAudioTrack</TokenIdentifier>
			<Abstract type="html">Plays an audio track via AVAudioPlayer.
Unlike AVAudioPlayer, however, it can be re-used to play another file.
Interruptions can be handled by OALAudioSupport (enabled by default).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
            
			
			<NodeRef refid="17"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setCurrentlyLoadedUrl:</TokenIdentifier>
			<Abstract type="html">The URL of the currently loaded audio data.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, retain) NSURL *currentlyLoadedUrl</Declaration>
			
			
			<Anchor>//api/name/currentlyLoadedUrl</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/currentlyLoadedUrl</TokenIdentifier>
			<Abstract type="html">The URL of the currently loaded audio data.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, retain) NSURL *currentlyLoadedUrl</Declaration>
			
			
			<Anchor>//api/name/currentlyLoadedUrl</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/currentlyLoadedUrl</TokenIdentifier>
			<Abstract type="html">The URL of the currently loaded audio data.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, retain) NSURL *currentlyLoadedUrl</Declaration>
			
			
			<Anchor>//api/name/currentlyLoadedUrl</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setDelegate:</TokenIdentifier>
			<Abstract type="html">Optional object that will receive notifications for decoding errors,
audio interruptions (such as an incoming phone call), and playback completion.
&lt;strong&gt;Note:&lt;/strong&gt; OALAudioTrack keeps a WEAK reference to delegate, so make sure you clear it
when your object is going to be deallocated.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) id&lt;AVAudioPlayerDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/delegate</TokenIdentifier>
			<Abstract type="html">Optional object that will receive notifications for decoding errors,
audio interruptions (such as an incoming phone call), and playback completion.
&lt;strong&gt;Note:&lt;/strong&gt; OALAudioTrack keeps a WEAK reference to delegate, so make sure you clear it
when your object is going to be deallocated.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) id&lt;AVAudioPlayerDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/delegate</TokenIdentifier>
			<Abstract type="html">Optional object that will receive notifications for decoding errors,
audio interruptions (such as an incoming phone call), and playback completion.
&lt;strong&gt;Note:&lt;/strong&gt; OALAudioTrack keeps a WEAK reference to delegate, so make sure you clear it
when your object is going to be deallocated.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) id&lt;AVAudioPlayerDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setGain:</TokenIdentifier>
			<Abstract type="html">The gain (volume for playback (0.0 - 1.0, where 1.0 = no attenuation).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float gain</Declaration>
			
			
			<Anchor>//api/name/gain</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/gain</TokenIdentifier>
			<Abstract type="html">The gain (volume for playback (0.0 - 1.0, where 1.0 = no attenuation).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float gain</Declaration>
			
			
			<Anchor>//api/name/gain</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/gain</TokenIdentifier>
			<Abstract type="html">The gain (volume for playback (0.0 - 1.0, where 1.0 = no attenuation).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float gain</Declaration>
			
			
			<Anchor>//api/name/gain</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setVolume:</TokenIdentifier>
			<Abstract type="html">The volume (alias to gain for playback (0.0 - 1.0, where 1.0 = no attenuation).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float volume</Declaration>
			
			
			<Anchor>//api/name/volume</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/volume</TokenIdentifier>
			<Abstract type="html">The volume (alias to gain for playback (0.0 - 1.0, where 1.0 = no attenuation).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float volume</Declaration>
			
			
			<Anchor>//api/name/volume</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/volume</TokenIdentifier>
			<Abstract type="html">The volume (alias to gain for playback (0.0 - 1.0, where 1.0 = no attenuation).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float volume</Declaration>
			
			
			<Anchor>//api/name/volume</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setPan:</TokenIdentifier>
			<Abstract type="html">Pan value (-1.0 = far left, 1.0 = far right).
&lt;strong&gt;Note:&lt;/strong&gt; This will have no effect on iOS versions prior to 4.0.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float pan</Declaration>
			
			
			<Anchor>//api/name/pan</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/pan</TokenIdentifier>
			<Abstract type="html">Pan value (-1.0 = far left, 1.0 = far right).
&lt;strong&gt;Note:&lt;/strong&gt; This will have no effect on iOS versions prior to 4.0.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float pan</Declaration>
			
			
			<Anchor>//api/name/pan</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/pan</TokenIdentifier>
			<Abstract type="html">Pan value (-1.0 = far left, 1.0 = far right).
&lt;strong&gt;Note:&lt;/strong&gt; This will have no effect on iOS versions prior to 4.0.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float pan</Declaration>
			
			
			<Anchor>//api/name/pan</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setMuted:</TokenIdentifier>
			<Abstract type="html">If true, audio track is muted</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool muted</Declaration>
			
			
			<Anchor>//api/name/muted</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/muted</TokenIdentifier>
			<Abstract type="html">If true, audio track is muted</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool muted</Declaration>
			
			
			<Anchor>//api/name/muted</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/muted</TokenIdentifier>
			<Abstract type="html">If true, audio track is muted</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool muted</Declaration>
			
			
			<Anchor>//api/name/muted</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setAutoPreload:</TokenIdentifier>
			<Abstract type="html">If true, automatically preload again when playback stops</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool autoPreload</Declaration>
			
			
			<Anchor>//api/name/autoPreload</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/autoPreload</TokenIdentifier>
			<Abstract type="html">If true, automatically preload again when playback stops</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool autoPreload</Declaration>
			
			
			<Anchor>//api/name/autoPreload</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/autoPreload</TokenIdentifier>
			<Abstract type="html">If true, automatically preload again when playback stops</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool autoPreload</Declaration>
			
			
			<Anchor>//api/name/autoPreload</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setPreloaded:</TokenIdentifier>
			<Abstract type="html">If true, audio track is in preloaded state</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) bool preloaded</Declaration>
			
			
			<Anchor>//api/name/preloaded</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloaded</TokenIdentifier>
			<Abstract type="html">If true, audio track is in preloaded state</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) bool preloaded</Declaration>
			
			
			<Anchor>//api/name/preloaded</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/preloaded</TokenIdentifier>
			<Abstract type="html">If true, audio track is in preloaded state</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) bool preloaded</Declaration>
			
			
			<Anchor>//api/name/preloaded</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setNumberOfLoops:</TokenIdentifier>
			<Abstract type="html">The number of times to loop playback (-1 = forever).
&lt;strong&gt;Note:&lt;/strong&gt; This value will be ignored, and get changed when you call the various playXX methods.
Only &quot;play&quot; will use the current value of &quot;numberOfLoops&quot;.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) NSInteger numberOfLoops</Declaration>
			
			
			<Anchor>//api/name/numberOfLoops</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/numberOfLoops</TokenIdentifier>
			<Abstract type="html">The number of times to loop playback (-1 = forever).
&lt;strong&gt;Note:&lt;/strong&gt; This value will be ignored, and get changed when you call the various playXX methods.
Only &quot;play&quot; will use the current value of &quot;numberOfLoops&quot;.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) NSInteger numberOfLoops</Declaration>
			
			
			<Anchor>//api/name/numberOfLoops</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/numberOfLoops</TokenIdentifier>
			<Abstract type="html">The number of times to loop playback (-1 = forever).
&lt;strong&gt;Note:&lt;/strong&gt; This value will be ignored, and get changed when you call the various playXX methods.
Only &quot;play&quot; will use the current value of &quot;numberOfLoops&quot;.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) NSInteger numberOfLoops</Declaration>
			
			
			<Anchor>//api/name/numberOfLoops</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setPaused:</TokenIdentifier>
			<Abstract type="html">If true, pause playback.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool paused</Declaration>
			
			
			<Anchor>//api/name/paused</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/paused</TokenIdentifier>
			<Abstract type="html">If true, pause playback.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool paused</Declaration>
			
			
			<Anchor>//api/name/paused</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/paused</TokenIdentifier>
			<Abstract type="html">If true, pause playback.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool paused</Declaration>
			
			
			<Anchor>//api/name/paused</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setPlayer:</TokenIdentifier>
			<Abstract type="html">Access to the underlying AVAudioPlayer object.
WARNING: Be VERY careful when accessing this, as some methods could cause
it to fall out of sync with OALAudioTrack (particularly play/pause/stop methods).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, retain) AVAudioPlayer *player</Declaration>
			
			
			<Anchor>//api/name/player</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/player</TokenIdentifier>
			<Abstract type="html">Access to the underlying AVAudioPlayer object.
WARNING: Be VERY careful when accessing this, as some methods could cause
it to fall out of sync with OALAudioTrack (particularly play/pause/stop methods).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, retain) AVAudioPlayer *player</Declaration>
			
			
			<Anchor>//api/name/player</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/player</TokenIdentifier>
			<Abstract type="html">Access to the underlying AVAudioPlayer object.
WARNING: Be VERY careful when accessing this, as some methods could cause
it to fall out of sync with OALAudioTrack (particularly play/pause/stop methods).</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, retain) AVAudioPlayer *player</Declaration>
			
			
			<Anchor>//api/name/player</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setPlaying:</TokenIdentifier>
			<Abstract type="html">If true, background music is currently playing.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) bool playing</Declaration>
			
			
			<Anchor>//api/name/playing</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playing</TokenIdentifier>
			<Abstract type="html">If true, background music is currently playing.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) bool playing</Declaration>
			
			
			<Anchor>//api/name/playing</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/playing</TokenIdentifier>
			<Abstract type="html">If true, background music is currently playing.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) bool playing</Declaration>
			
			
			<Anchor>//api/name/playing</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setCurrentTime:</TokenIdentifier>
			<Abstract type="html">The current playback position in seconds from the start of the sound.
You can set this to change the playback position, whether it is currently playing or not.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) NSTimeInterval currentTime</Declaration>
			
			
			<Anchor>//api/name/currentTime</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/currentTime</TokenIdentifier>
			<Abstract type="html">The current playback position in seconds from the start of the sound.
You can set this to change the playback position, whether it is currently playing or not.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) NSTimeInterval currentTime</Declaration>
			
			
			<Anchor>//api/name/currentTime</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/currentTime</TokenIdentifier>
			<Abstract type="html">The current playback position in seconds from the start of the sound.
You can set this to change the playback position, whether it is currently playing or not.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) NSTimeInterval currentTime</Declaration>
			
			
			<Anchor>//api/name/currentTime</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setDeviceCurrentTime:</TokenIdentifier>
			<Abstract type="html">The value of this property increases monotonically while an audio player is playing or paused.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSTimeInterval deviceCurrentTime</Declaration>
			
			
			<Anchor>//api/name/deviceCurrentTime</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/deviceCurrentTime</TokenIdentifier>
			<Abstract type="html">The value of this property increases monotonically while an audio player is playing or paused.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSTimeInterval deviceCurrentTime</Declaration>
			
			
			<Anchor>//api/name/deviceCurrentTime</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/deviceCurrentTime</TokenIdentifier>
			<Abstract type="html">The value of this property increases monotonically while an audio player is playing or paused.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSTimeInterval deviceCurrentTime</Declaration>
			
			
			<Anchor>//api/name/deviceCurrentTime</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setDuration:</TokenIdentifier>
			<Abstract type="html">The duration, in seconds, of the currently loaded sound.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/duration</TokenIdentifier>
			<Abstract type="html">The duration, in seconds, of the currently loaded sound.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/duration</TokenIdentifier>
			<Abstract type="html">The duration, in seconds, of the currently loaded sound.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setNumberOfChannels:</TokenIdentifier>
			<Abstract type="html">The number of channels in the currently loaded sound.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSUInteger numberOfChannels</Declaration>
			
			
			<Anchor>//api/name/numberOfChannels</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/numberOfChannels</TokenIdentifier>
			<Abstract type="html">The number of channels in the currently loaded sound.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSUInteger numberOfChannels</Declaration>
			
			
			<Anchor>//api/name/numberOfChannels</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/numberOfChannels</TokenIdentifier>
			<Abstract type="html">The number of channels in the currently loaded sound.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, assign) NSUInteger numberOfChannels</Declaration>
			
			
			<Anchor>//api/name/numberOfChannels</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/OALAudioTrack/track</TokenIdentifier>
			<Abstract type="html">Create a new audio track.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>+ (id)track</Declaration>
			
			<ReturnValue><Abstract type="html">A new audio track.</Abstract></ReturnValue>
			<Anchor>//api/name/track</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadUrl:</TokenIdentifier>
			<Abstract type="html">Preload the contents of a URL for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadUrl:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadUrl:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadUrl:seekTime:</TokenIdentifier>
			<Abstract type="html">Preload the contents of a URL for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadUrl:(NSURL *)url seekTime:(NSTimeInterval)seekTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>seekTime</Name>
					<Abstract type="html">The position in the file to start playing at.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadUrl:seekTime:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadFile:</TokenIdentifier>
			<Abstract type="html">Preload the contents of a file for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadFile:(NSString *)path</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadFile:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadFile:seekTime:</TokenIdentifier>
			<Abstract type="html">Preload the contents of a file for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadFile:(NSString *)path seekTime:(NSTimeInterval)seekTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>seekTime</Name>
					<Abstract type="html">The position in the file to start playing at.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadFile:seekTime:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadUrlAsync:target:selector:</TokenIdentifier>
			<Abstract type="html">Asynchronously preload the contents of a URL for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadUrlAsync:(NSURL *)url target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when preparation is complete.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when preparation is complete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successfully queued.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadUrlAsync:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadUrlAsync:seekTime:target:selector:</TokenIdentifier>
			<Abstract type="html">Asynchronously preload the contents of a URL for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadUrlAsync:(NSURL *)url seekTime:(NSTimeInterval)seekTime target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>seekTime</Name>
					<Abstract type="html">The position in the file to start playing at.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when preparation is complete.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when preparation is complete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successfully queued.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadUrlAsync:seekTime:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadFileAsync:target:selector:</TokenIdentifier>
			<Abstract type="html">Asynchronously preload the contents of a file for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadFileAsync:(NSString *)path target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when preparation is complete.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when preparation is complete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successfully queued.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadFileAsync:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/preloadFileAsync:seekTime:target:selector:</TokenIdentifier>
			<Abstract type="html">Asynchronously preload the contents of a file for playback.
Once the audio data is preloaded, you can call &quot;play&quot; to play it.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)preloadFileAsync:(NSString *)path seekTime:(NSTimeInterval)seekTime target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>seekTime</Name>
					<Abstract type="html">The position in the file to start playing at.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when preparation is complete.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when preparation is complete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successfully queued.</Abstract></ReturnValue>
			<Anchor>//api/name/preloadFileAsync:seekTime:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playUrl:</TokenIdentifier>
			<Abstract type="html">Play the contents of a URL once.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playUrl:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/playUrl:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playUrl:loops:</TokenIdentifier>
			<Abstract type="html">Play the contents of a URL and loop the specified number of times.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playUrl:(NSURL *)url loops:(NSInteger)loops</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>loops</Name>
					<Abstract type="html">The number of times to loop playback (-1 = forever)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/playUrl:loops:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playFile:</TokenIdentifier>
			<Abstract type="html">Play the contents of a file once.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playFile:(NSString *)path</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/playFile:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playFile:loops:</TokenIdentifier>
			<Abstract type="html">Play the contents of a file and loop the specified number of times.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playFile:(NSString *)path loops:(NSInteger)loops</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>loops</Name>
					<Abstract type="html">The number of times to loop playback (-1 = forever)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/playFile:loops:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playUrlAsync:target:selector:</TokenIdentifier>
			<Abstract type="html">Play the contents of a URL asynchronously once.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)playUrlAsync:(NSURL *)url target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when playing has started.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when playing has started.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/playUrlAsync:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playUrlAsync:loops:target:selector:</TokenIdentifier>
			<Abstract type="html">Play the contents of a URL asynchronously and loop the specified number of times.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)playUrlAsync:(NSURL *)url loops:(NSInteger)loops target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>loops</Name>
					<Abstract type="html">The number of times to loop playback (-1 = forever)</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when playing has started.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when playing has started.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/playUrlAsync:loops:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playFileAsync:target:selector:</TokenIdentifier>
			<Abstract type="html">Play the contents of a file asynchronously once.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)playFileAsync:(NSString *)path target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when playing has started.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when playing has started.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/playFileAsync:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playFileAsync:loops:target:selector:</TokenIdentifier>
			<Abstract type="html">Play the contents of a file asynchronously and loop the specified number of times.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)playFileAsync:(NSString *)path loops:(NSInteger)loops target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The file containing the sound data.</Abstract>
				</Parameter><Parameter>
					<Name>loops</Name>
					<Abstract type="html">The number of times to loop playback (-1 = forever)</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">the target to inform when playing has started.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">the selector to call when playing has started.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/playFileAsync:loops:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/play</TokenIdentifier>
			<Abstract type="html">Play the currently loaded audio track.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)play</Declaration>
			
			<ReturnValue><Abstract type="html">TRUE if the operation was successful.</Abstract></ReturnValue>
			<Anchor>//api/name/play</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playAtTime:</TokenIdentifier>
			<Abstract type="html">Plays a sound asynchronously, starting at a specified point in the audio output device’s timeline.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playAtTime:(NSTimeInterval)time</Declaration>
			<Parameters>
				<Parameter>
					<Name>time</Name>
					<Abstract type="html">The time (device time) to start playing at.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the playback was successfully scheduled.</Abstract></ReturnValue>
			<Anchor>//api/name/playAtTime:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playAfterTrack:</TokenIdentifier>
			<Abstract type="html">Plays the currently preloaded track asynchronously when the specified track completes.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playAfterTrack:(OALAudioTrack *)track</Declaration>
			<Parameters>
				<Parameter>
					<Name>track</Name>
					<Abstract type="html">The track to play after</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the playback was successfully scheduled.</Abstract></ReturnValue>
			<Anchor>//api/name/playAfterTrack:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/playAfterTrack:timeAdjust:</TokenIdentifier>
			<Abstract type="html">Plays the currently preloaded track asynchronously when the specified track completes.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (bool)playAfterTrack:(OALAudioTrack *)track timeAdjust:(NSTimeInterval)timeAdjust</Declaration>
			<Parameters>
				<Parameter>
					<Name>track</Name>
					<Abstract type="html">The track to play after</Abstract>
				</Parameter><Parameter>
					<Name>timeAdjust</Name>
					<Abstract type="html">fine-tune value added to the time start offset.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the playback was successfully scheduled.</Abstract></ReturnValue>
			<Anchor>//api/name/playAfterTrack:timeAdjust:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/stop</TokenIdentifier>
			<Abstract type="html">Stop playing and stop all operations.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)stop</Declaration>
			
			
			<Anchor>//api/name/stop</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/fadeTo:duration:target:selector:</TokenIdentifier>
			<Abstract type="html">Fade to the specified gain value.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)fadeTo:(float)gain duration:(float)duration target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>gain</Name>
					<Abstract type="html">The gain to fade to.</Abstract>
				</Parameter><Parameter>
					<Name>duration</Name>
					<Abstract type="html">The duration of the fade operation in seconds.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The target to notify when the fade completes (can be nil).</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call when the fade completes.  The selector must accept
a single parameter, which will be the object that performed the fade.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fadeTo:duration:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/stopFade</TokenIdentifier>
			<Abstract type="html">Stop the currently running fade operation, if any.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)stopFade</Declaration>
			
			
			<Anchor>//api/name/stopFade</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/panTo:duration:target:selector:</TokenIdentifier>
			<Abstract type="html">Pan to the specified pan value.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)panTo:(float)pan duration:(float)duration target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>pan</Name>
					<Abstract type="html">The value to pan to.</Abstract>
				</Parameter><Parameter>
					<Name>duration</Name>
					<Abstract type="html">The duration of the pan operation in seconds.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The target to notify when the pan completes (can be nil).</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to call when the pan completes.  The selector must accept
a single parameter, which will be the object that performed the pan.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/panTo:duration:target:selector:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/stopPan</TokenIdentifier>
			<Abstract type="html">Stop the currently running pan operation, if any.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)stopPan</Declaration>
			
			
			<Anchor>//api/name/stopPan</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/stopActions</TokenIdentifier>
			<Abstract type="html">Stop any internal fade or pan actions.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)stopActions</Declaration>
			
			
			<Anchor>//api/name/stopActions</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/clear</TokenIdentifier>
			<Abstract type="html">Unload and clear all audio data, stop playing, and stop all operations.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)clear</Declaration>
			
			
			<Anchor>//api/name/clear</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/setMeteringEnabled:</TokenIdentifier>
			<Abstract type="html">If true, metering is enabled.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool meteringEnabled</Declaration>
			
			
			<Anchor>//api/name/meteringEnabled</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/meteringEnabled</TokenIdentifier>
			<Abstract type="html">If true, metering is enabled.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool meteringEnabled</Declaration>
			
			
			<Anchor>//api/name/meteringEnabled</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OALAudioTrack/meteringEnabled</TokenIdentifier>
			<Abstract type="html">If true, metering is enabled.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) bool meteringEnabled</Declaration>
			
			
			<Anchor>//api/name/meteringEnabled</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/updateMeters</TokenIdentifier>
			<Abstract type="html">Updates the metering system to give current values.
You must call this method before calling averagePowerForChannel or peakPowerForChannel in
order to get current values.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (void)updateMeters</Declaration>
			
			
			<Anchor>//api/name/updateMeters</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/averagePowerForChannel:</TokenIdentifier>
			<Abstract type="html">Gives the average power for a given channel, in decibels, for the sound being played.
0 dB indicates maximum power (full scale).
-160 dB indicates minimum power (near silence).
If the signal provided to the audio player exceeds full scale, then the value may be &gt; 0.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (float)averagePowerForChannel:(NSUInteger)channelNumber</Declaration>
			<Parameters>
				<Parameter>
					<Name>channelNumber</Name>
					<Abstract type="html">The channel to get the value from.  For mono or left, use 0.  For right,
use 1.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the average power for the channel.</Abstract></ReturnValue>
			<Anchor>//api/name/averagePowerForChannel:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OALAudioTrack/peakPowerForChannel:</TokenIdentifier>
			<Abstract type="html">Gives the peak power for a given channel, in decibels, for the sound being played.
0 dB indicates maximum power (full scale).
-160 dB indicates minimum power (near silence).
If the signal provided to the audio player exceeds full scale, then the value may be &gt; 0.</Abstract>
			<DeclaredIn>OALAudioTrack.h</DeclaredIn>
			
			<Declaration>- (float)peakPowerForChannel:(NSUInteger)channelNumber</Declaration>
			<Parameters>
				<Parameter>
					<Name>channelNumber</Name>
					<Abstract type="html">The channel to get the value from.  For mono or left, use 0.  For right,
use 1.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the average power for the channel.</Abstract></ReturnValue>
			<Anchor>//api/name/peakPowerForChannel:</Anchor>
            <NodeRef refid="17"/>
		</Token>
		
        
	</File>
</Tokens>